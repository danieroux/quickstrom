import control;
import list;
import ltl;
import quickstrom/keys;

action click!(x) = for element in x. { id: "click", event: false, args: [element.ref] } when element.enabled && element.visible && element.interactable;

action doubleClick!(x) = for element in x. { id: "doubleClick", event: false, args: [element.ref] } when element.enabled && element.visible && element.interactable;

action select!(x) = for element in x. { id: "select", event: false, args: [element.ref, element.value] } when element.enabled && element.visible && element.interactable;

action clear!(x) = for element in x. { id: "clear", event: false, args: [element.ref] } when (not element.active) && element.interactable;

action focus!(x) = for element in x. { id: "focus", event: false, args: [element.ref] } when (not element.active) && element.interactable;

action keyPress!(key) = { id: "keyPress", event: false, args: [key] };

action enterText!(text) = { id: "enterText", event: false, args: [text] };

action enterTextInto!(text, elements) = for element in elements. { id: "enterTextInto", event: false, args: [text, element.ref] };

action changed?(x) = for element in x. { id: "changed", event: true, args: [x.ref]};

action loaded? = { id: "loaded", event: true, args: [] };

action noop! = {id:"noop",event:false,args:[]};

/// Scroll by absolute number of pixels from the current position. Use negative `x` or `y` arguments to scroll left or up.
action scrollBy!(x, y) =
  { id: "scrollBy", event: false, args: [x, y] } when (
    // Check that the scroll position will be changed in at least one direction.
    (y != 0 &&
        if y < 0 {
          `html`.scrollTop > 0
        } else {
          `html`.scrollTop < (`html`.scrollHeight - `html`.clientHeight)
        }
    ) ||
    (x != 0 &&
      if x < 0 {
        `html`.scrollLeft > 0
      } else {
        `html`.scrollLeft < (`html`.scrollWidth - `html`.clientWidth)
      })
  );

/// Scroll by ratio of the viewport size, i.e. `scrollByViewport!(0, 1)` to scroll down one viewport height. Use negative `x` or `y` arguments to scroll left or up.
action scrollByViewport!(x, y) = scrollBy!(`html`.clientWidth * x, `html`.clientHeight * y);